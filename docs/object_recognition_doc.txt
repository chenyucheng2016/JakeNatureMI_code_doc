def hof(flow_in, orientations=9, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualise=False,
        normalise=False, motion_threshold=1.):
    """
    Extract Histogram of Optical Flow (HOF) for a given optical flow field
        1. (optional) global image normalisation
        2. computing the dense optical flow
        3. computing flow histograms
        4. normalising across blocks
        5. flattening into a feature vector
    Parameters
    ----------
    flow_in : (M, N) ndarray
        Input optical flow field (x and y flow images).
    orientations : int
        Number of orientation bins.
    pixels_per_cell : 2 tuple (int, int)
        Size (in pixels) of a cell.
    cells_per_block  : 2 tuple (int,int)
        Number of cells in each block.
    visualise : bool, optional
        Also return an image of the hof.
    normalise : bool, optional
        Apply power law compression to normalise the image before
        processing.
    motion_threshold : threshold for no motion
    Returns
    -------
    newarr : ndarray
        hof for the image as a 1D (flattened) array.
    hof_image : ndarray (if visualise=True)
        A visualisation of the hof image.
    References
    ----------
    * https://github.com/colincsl/pyKinectTools/blob/master/pyKinectTools/algs/HistogramOfOpticalFlow.py
    * http://en.wikipedia.org/wiki/Histogram_of_oriented_gradients
    * Dalal, N and Triggs, B, Histograms of Oriented Gradients for
      Human Detection, IEEE Computer Society Conference on Computer
      Vision and Pattern Recognition 2005 San Diego, CA, USA
    """

def rectangle_from_img_mask(mask_in, pad=10):
    """
    Summary line.
    
    Compute a bounding box based on the mask processoed from frame(s)
    
    Parameters:
    ------------
    mask: binary image with action/object detected
    pad: size of pad added at the edge of the mask
    
    Returns:
    ------------
    rectangular bounding box: a 2x2 array containig two vertics of the bounding box
    
    """

def detect_object_qh(flow_in, gamma=0.5, return_mask=False, is_frames=False):
    """
    Summary line.
    
    Detect the existence of an object from optical flow
    
    Parameters:
    ------------
    flow_in: The optical flow computed by either rgb frames or a series of events 
    gamma: threshold of optical flow vector magnitude 
    return_mask=False: a boolean variable specifying whether a mask is returned
    is_frames=False:a boolean variable specifying whether the input optical flow is computed by rgb frames or events
    
    Returns:
    ------------
    mask: binary image with object detected
    rectangular bounding box: a 2x2 array containig two vertics of the bounding box
    
    """

def visualize_hof_algorithm(img_in, flow_in, mask_in):
    """
    Summary line.

    superimpose the optical flow and histogram of flow with the original rgb image captured by the quadcopter front camera and display the superimposed image

    Parameters:
    ------------
    img_in: the orginal rgb frame
    flow_in: the optical flow computed either by rgb frames or by events
    mask_in: a binary image with action/object detected
    
    Returns:
    ------------
    None

    """